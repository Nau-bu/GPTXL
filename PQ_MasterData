let
  RawPathVal = Excel.CurrentWorkbook(){[Name="ThisWorkbookPath"]}[Content]{0}[Column1],
  ThisPath   = if Value.Is(RawPathVal, type text) then RawPathVal else Text.From(RawPathVal),
  BaseFolder = if Text.EndsWith(ThisPath, "\\") then ThisPath else ThisPath & "\\",
  RawFolder  = BaseFolder & "Raw\\",

  AllFiles   = Folder.Files(RawFolder),
  ExcFiles   = Table.SelectRows(AllFiles, each List.Contains({".xlsx",".xlsm",".xlsb"}, Text.Lower([Extension]))),

  WithWB     = Table.AddColumn(ExcFiles, "WB", each Excel.Workbook([Content], true)),
  AllSheets  = Table.ExpandTableColumn(WithWB, "WB", {"Name","Data"}, {"SheetName","Data"}),
  Promoted   = Table.TransformColumns(AllSheets, { "Data", each Table.PromoteHeaders(_, [PromoteAllScalars=true]) }),

  // Historical sheets
  HistSheets = Table.SelectRows(Promoted, each [SheetName] = "Combined Level History"),
  FlatHist   = Table.Combine(HistSheets[Data]),
  DateCol    = Table.ColumnNames(FlatHist){0},
  Unpvt      = Table.UnpivotOtherColumns(FlatHist, {DateCol}, "Attribute", "Value"),
  ForceText  = Table.TransformColumnTypes(Unpvt, {{"Attribute", type text}}),
  NonBlank   = Table.SelectRows(ForceText, each Text.Length([Attribute]) > 0),
  ParsedH    = Table.AddColumn(NonBlank, "Rec", each let p=Text.Split([Attribute]," ") in if List.Count(p)>1 then [BondID=Text.Combine(List.RemoveLastN(p,1)," "),Metric=List.Last(p)] else null),
  GoodH      = Table.SelectRows(ParsedH, each [Rec]<>null),
  ExpH       = Table.ExpandRecordColumn(GoodH,"Rec",{"BondID","Metric"}),
  FilterH    = Table.SelectRows(ExpH, each List.Contains({"Price","YTM","G-Spread","T-Spread","YTC"}, [Metric])),
  PivotH     = Table.Pivot(FilterH, List.Distinct(FilterH[Metric]), "Metric", "Value"),
  RenameH    = Table.RenameColumns(PivotH,{{"YTM","Yield to Maturity"},{"YTC","Yield to Call"},{"G-Spread","G Spread"},{"T-Spread","T Spread"}},MissingField.Ignore),
  AdjH       = Table.AddColumn(RenameH,"Adjusted",each true,type logical),
  TimeH      = Table.RenameColumns(AdjH,{{DateCol,"Trade Date and Time"}},MissingField.Ignore),
  HistFinal  = Table.SelectColumns(TimeH,{"Trade Date and Time","BondID","Price","Yield to Maturity","G Spread","T Spread","Yield to Call","Adjusted"},MissingField.Ignore),

  // Trade sheets
  TradeSheets= Table.SelectRows(Promoted, each Text.StartsWith([SheetName],"Trades ") and Value.Is([Data], type table)),
  SampleTbl  = if Table.IsEmpty(TradeSheets) then #table({}, {}) else TradeSheets{0}[Data],
  ExpT       = Table.ExpandTableColumn(TradeSheets,"Data",Table.ColumnNames(SampleTbl)),
  AdjT       = Table.AddColumn(ExpT,"Adjusted",each false,type logical),
  IDT        = Table.AddColumn(AdjT,"BondID",each Text.Trim(Text.Middle(Text.From([SheetName]),7)),type text),
  TypedT     = Table.TransformColumnTypes(IDT,{
                  {"Trade Date and Time",type datetime},
                  {"Price",type number},
                  {"Yield to Maturity",type number},
                  {"G Spread",type number},
                  {"T Spread",type number},
                  {"Yield to Call",type number},
                  {"Quantity",Int64.Type}
               },MissingField.Ignore),
  BucketT    = Table.AddColumn(TypedT,"TradeSizeBucket",each if [Quantity]<1000000 then "<1M" else if [Quantity]<5000000 then "1M-5M" else ">5M",type text),
  TradesFinal= Table.SelectColumns(BucketT,{"Trade Date and Time","BondID","Price","Yield to Maturity","G Spread","T Spread","Yield to Call","Quantity","TradeSizeBucket","Adjusted"},MissingField.Ignore),

  // Combine & maturity
  Combined   = Table.Combine({HistFinal,TradesFinal}),
  WithYear   = Table.AddColumn(Combined,"YearMaturity",each try Number.From(Text.AfterDelimiter(List.Last(Text.Split(Text.From([BondID])," ")),"/")) otherwise null,Int64.Type),
  FinalTable = Table.AddColumn(WithYear,"MaturityBucket",each if [YearMaturity]<=3 then "3Y" else if [YearMaturity]<=5 then "5Y" else if [YearMaturity]<=10 then "10Y" else ">10Y",type text)
in
  FinalTable
